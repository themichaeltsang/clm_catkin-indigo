"""autogenerated by genpy from clm_bridge/ClmHeads.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import clm_bridge.msg

class ClmHeads(genpy.Message):
  _md5sum = "20ec105ac9fd25b88a2db6c87d9f2b8a"
  _type = "clm_bridge/ClmHeads"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """clm_bridge/ClmHead[] heads

================================================================================
MSG: clm_bridge/ClmHead
uint8 detection_success
float32 detection_confidence
float32 time_stamp 

clm_bridge/ClmHeadPose headpose
clm_bridge/ClmEyeGaze[] eyegazes
clm_bridge/ClmFacialActionUnit[] aus
================================================================================
MSG: clm_bridge/ClmHeadPose
float32 pitch
float32 yaw
float32 roll
float32 x
float32 y
float32 z
================================================================================
MSG: clm_bridge/ClmEyeGaze
uint8 RIGHT_EYE = 0
uint8 LEFT_EYE = 1

uint8 eye_id

float32 gaze_direction_cameraref_x
float32 gaze_direction_cameraref_y
float32 gaze_direction_cameraref_z

float32 gaze_direction_headref_x
float32 gaze_direction_headref_y
float32 gaze_direction_headref_z
================================================================================
MSG: clm_bridge/ClmFacialActionUnit
uint8 AU_TYPE_AU01_INNER_BROW_RAISER = 1
uint8 AU_TYPE_AU02_OUTER_BROW_RAISER = 2
uint8 AU_TYPE_AU04_BROW_LOWERER = 4
uint8 AU_TYPE_AU05_UPPER_LID_RAISER = 5
uint8 AU_TYPE_AU06_CHEEK_RAISER = 6
uint8 AU_TYPE_AU09_NOSE_WRINKLER = 9
uint8 AU_TYPE_AU10_UPPER_LIP_RAISER = 10
uint8 AU_TYPE_AU12_LIP_CORNER_PULLER = 12
uint8 AU_TYPE_AU14_DIMPLER = 14
uint8 AU_TYPE_AU15_LIP_CORNER_DEPRESSOR = 15
uint8 AU_TYPE_AU17_CHIN_RAISER = 17
uint8 AU_TYPE_AU20_LIP_STRETCHER = 20
uint8 AU_TYPE_AU23_LIP_LIGHTENER = 23 
uint8 AU_TYPE_AU25_LIPS_PART = 25
uint8 AU_TYPE_AU26_JAW_DROP = 26
uint8 AU_TYPE_AU28_LIP_SUCK = 28
uint8 AU_TYPE_AU45_BLINK = 45

uint8 AU_PREDICTION_METHOD_REGRESSION = 0
uint8 AU_PREDICTION_METHOD_CLASSIFICATION = 1

float32 value
uint8 au_type
uint8 au_prediction_method
"""
  __slots__ = ['heads']
  _slot_types = ['clm_bridge/ClmHead[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       heads

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClmHeads, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.heads is None:
        self.heads = []
    else:
      self.heads = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.heads)
      buff.write(_struct_I.pack(length))
      for val1 in self.heads:
        _x = val1
        buff.write(_struct_B2f.pack(_x.detection_success, _x.detection_confidence, _x.time_stamp))
        _v1 = val1.headpose
        _x = _v1
        buff.write(_struct_6f.pack(_x.pitch, _x.yaw, _x.roll, _x.x, _x.y, _x.z))
        length = len(val1.eyegazes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.eyegazes:
          _x = val2
          buff.write(_struct_B6f.pack(_x.eye_id, _x.gaze_direction_cameraref_x, _x.gaze_direction_cameraref_y, _x.gaze_direction_cameraref_z, _x.gaze_direction_headref_x, _x.gaze_direction_headref_y, _x.gaze_direction_headref_z))
        length = len(val1.aus)
        buff.write(_struct_I.pack(length))
        for val2 in val1.aus:
          _x = val2
          buff.write(_struct_f2B.pack(_x.value, _x.au_type, _x.au_prediction_method))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.heads is None:
        self.heads = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.heads = []
      for i in range(0, length):
        val1 = clm_bridge.msg.ClmHead()
        _x = val1
        start = end
        end += 9
        (_x.detection_success, _x.detection_confidence, _x.time_stamp,) = _struct_B2f.unpack(str[start:end])
        _v2 = val1.headpose
        _x = _v2
        start = end
        end += 24
        (_x.pitch, _x.yaw, _x.roll, _x.x, _x.y, _x.z,) = _struct_6f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.eyegazes = []
        for i in range(0, length):
          val2 = clm_bridge.msg.ClmEyeGaze()
          _x = val2
          start = end
          end += 25
          (_x.eye_id, _x.gaze_direction_cameraref_x, _x.gaze_direction_cameraref_y, _x.gaze_direction_cameraref_z, _x.gaze_direction_headref_x, _x.gaze_direction_headref_y, _x.gaze_direction_headref_z,) = _struct_B6f.unpack(str[start:end])
          val1.eyegazes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.aus = []
        for i in range(0, length):
          val2 = clm_bridge.msg.ClmFacialActionUnit()
          _x = val2
          start = end
          end += 6
          (_x.value, _x.au_type, _x.au_prediction_method,) = _struct_f2B.unpack(str[start:end])
          val1.aus.append(val2)
        self.heads.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.heads)
      buff.write(_struct_I.pack(length))
      for val1 in self.heads:
        _x = val1
        buff.write(_struct_B2f.pack(_x.detection_success, _x.detection_confidence, _x.time_stamp))
        _v3 = val1.headpose
        _x = _v3
        buff.write(_struct_6f.pack(_x.pitch, _x.yaw, _x.roll, _x.x, _x.y, _x.z))
        length = len(val1.eyegazes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.eyegazes:
          _x = val2
          buff.write(_struct_B6f.pack(_x.eye_id, _x.gaze_direction_cameraref_x, _x.gaze_direction_cameraref_y, _x.gaze_direction_cameraref_z, _x.gaze_direction_headref_x, _x.gaze_direction_headref_y, _x.gaze_direction_headref_z))
        length = len(val1.aus)
        buff.write(_struct_I.pack(length))
        for val2 in val1.aus:
          _x = val2
          buff.write(_struct_f2B.pack(_x.value, _x.au_type, _x.au_prediction_method))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.heads is None:
        self.heads = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.heads = []
      for i in range(0, length):
        val1 = clm_bridge.msg.ClmHead()
        _x = val1
        start = end
        end += 9
        (_x.detection_success, _x.detection_confidence, _x.time_stamp,) = _struct_B2f.unpack(str[start:end])
        _v4 = val1.headpose
        _x = _v4
        start = end
        end += 24
        (_x.pitch, _x.yaw, _x.roll, _x.x, _x.y, _x.z,) = _struct_6f.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.eyegazes = []
        for i in range(0, length):
          val2 = clm_bridge.msg.ClmEyeGaze()
          _x = val2
          start = end
          end += 25
          (_x.eye_id, _x.gaze_direction_cameraref_x, _x.gaze_direction_cameraref_y, _x.gaze_direction_cameraref_z, _x.gaze_direction_headref_x, _x.gaze_direction_headref_y, _x.gaze_direction_headref_z,) = _struct_B6f.unpack(str[start:end])
          val1.eyegazes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.aus = []
        for i in range(0, length):
          val2 = clm_bridge.msg.ClmFacialActionUnit()
          _x = val2
          start = end
          end += 6
          (_x.value, _x.au_type, _x.au_prediction_method,) = _struct_f2B.unpack(str[start:end])
          val1.aus.append(val2)
        self.heads.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B2f = struct.Struct("<B2f")
_struct_B6f = struct.Struct("<B6f")
_struct_6f = struct.Struct("<6f")
_struct_f2B = struct.Struct("<f2B")
