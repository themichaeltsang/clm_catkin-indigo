"""autogenerated by genpy from clm_bridge/ClmFacialActionUnit.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ClmFacialActionUnit(genpy.Message):
  _md5sum = "2611a6dacad06d4f0687fe6c40578151"
  _type = "clm_bridge/ClmFacialActionUnit"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 AU_TYPE_AU01_INNER_BROW_RAISER = 1
uint8 AU_TYPE_AU02_OUTER_BROW_RAISER = 2
uint8 AU_TYPE_AU04_BROW_LOWERER = 4
uint8 AU_TYPE_AU05_UPPER_LID_RAISER = 5
uint8 AU_TYPE_AU06_CHEEK_RAISER = 6
uint8 AU_TYPE_AU09_NOSE_WRINKLER = 9
uint8 AU_TYPE_AU10_UPPER_LIP_RAISER = 10
uint8 AU_TYPE_AU12_LIP_CORNER_PULLER = 12
uint8 AU_TYPE_AU14_DIMPLER = 14
uint8 AU_TYPE_AU15_LIP_CORNER_DEPRESSOR = 15
uint8 AU_TYPE_AU17_CHIN_RAISER = 17
uint8 AU_TYPE_AU20_LIP_STRETCHER = 20
uint8 AU_TYPE_AU23_LIP_LIGHTENER = 23 
uint8 AU_TYPE_AU25_LIPS_PART = 25
uint8 AU_TYPE_AU26_JAW_DROP = 26
uint8 AU_TYPE_AU28_LIP_SUCK = 28
uint8 AU_TYPE_AU45_BLINK = 45

uint8 AU_PREDICTION_METHOD_REGRESSION = 0
uint8 AU_PREDICTION_METHOD_CLASSIFICATION = 1

float32 value
uint8 au_type
uint8 au_prediction_method
"""
  # Pseudo-constants
  AU_TYPE_AU01_INNER_BROW_RAISER = 1
  AU_TYPE_AU02_OUTER_BROW_RAISER = 2
  AU_TYPE_AU04_BROW_LOWERER = 4
  AU_TYPE_AU05_UPPER_LID_RAISER = 5
  AU_TYPE_AU06_CHEEK_RAISER = 6
  AU_TYPE_AU09_NOSE_WRINKLER = 9
  AU_TYPE_AU10_UPPER_LIP_RAISER = 10
  AU_TYPE_AU12_LIP_CORNER_PULLER = 12
  AU_TYPE_AU14_DIMPLER = 14
  AU_TYPE_AU15_LIP_CORNER_DEPRESSOR = 15
  AU_TYPE_AU17_CHIN_RAISER = 17
  AU_TYPE_AU20_LIP_STRETCHER = 20
  AU_TYPE_AU23_LIP_LIGHTENER = 23
  AU_TYPE_AU25_LIPS_PART = 25
  AU_TYPE_AU26_JAW_DROP = 26
  AU_TYPE_AU28_LIP_SUCK = 28
  AU_TYPE_AU45_BLINK = 45
  AU_PREDICTION_METHOD_REGRESSION = 0
  AU_PREDICTION_METHOD_CLASSIFICATION = 1

  __slots__ = ['value','au_type','au_prediction_method']
  _slot_types = ['float32','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       value,au_type,au_prediction_method

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ClmFacialActionUnit, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.value is None:
        self.value = 0.
      if self.au_type is None:
        self.au_type = 0
      if self.au_prediction_method is None:
        self.au_prediction_method = 0
    else:
      self.value = 0.
      self.au_type = 0
      self.au_prediction_method = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_f2B.pack(_x.value, _x.au_type, _x.au_prediction_method))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.value, _x.au_type, _x.au_prediction_method,) = _struct_f2B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_f2B.pack(_x.value, _x.au_type, _x.au_prediction_method))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 6
      (_x.value, _x.au_type, _x.au_prediction_method,) = _struct_f2B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f2B = struct.Struct("<f2B")
